import os
import logging
import cv2
import numpy as np
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image
import pytesseract
import io
from pdf2image import convert_from_bytes
import tempfile
from dotenv import load_dotenv

BOT_TOKEN = '8264719055:AAE6Ytr85Lh8MqRUozmkVyTQd_VhVXh--LQ'

def preprocess_image(image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ numpy array –¥–ª—è OpenCV
    if isinstance(image, Image.Image):
        image = np.array(image)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGB –≤ BGR (OpenCV format)
        if image.shape[2] == 3:
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º Gaussian blur –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º adaptive thresholding
    thresh = cv2.adaptiveThreshold(
        blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
        cv2.THRESH_BINARY, 11, 2
    )
    
    # –£–±–∏—Ä–∞–µ–º —à—É–º —Å –ø–æ–º–æ—â—å—é –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    kernel = np.ones((1, 1), np.uint8)
    processed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    processed = cv2.medianBlur(processed, 3)
    
    return processed

def improve_ocr_quality(text):
    """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    lines = text.split('\n')
    cleaned_lines = []
    
    for line in lines:
        line = line.strip()
        if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º common OCR –æ—à–∏–±–∫–∏
            line = line.replace('|', 'I').replace('l', 'I')
            line = line.replace('0', 'O').replace('1', 'I')
            cleaned_lines.append(line)
    
    return '\n'.join(cleaned_lines)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—ã–π OCR –±–æ—Ç!

üìù –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ–∫—É—Å–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–º —Ñ–æ–Ω–µ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
üì∑ –§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
üìÑ PDF —Ñ–∞–π–ª

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫–∏
    """
    await update.message.reply_text(welcome_text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(photo_bytes))
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processed_image = preprocess_image(image)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        custom_config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789.,!?-+()/:;%&" '
        text = pytesseract.image_to_string(processed_image, lang='rus+eng', config=custom_config)
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞
        improved_text = improve_ocr_quality(text)
        
        if improved_text.strip():
            if len(improved_text) > 4000:
                with tempfile.NamedTemporaryFile(mode='w+', suffix='.txt', encoding='utf-8', delete=False) as temp_file:
                    temp_file.write(improved_text)
                    temp_file.flush()
                    await update.message.reply_document(
                        document=InputFile(temp_file.name, filename='recognized_text.txt')
                    )
                os.unlink(temp_file.name)
            else:
                await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{improved_text}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document
        
        if not document.file_name.lower().endswith('.pdf'):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
            return
            
        await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        file = await document.get_file()
        pdf_bytes = await file.download_as_bytearray()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º DPI
        images = convert_from_bytes(pdf_bytes, dpi=300, poppler_path=r'C:\Program Files\poppler-23.11.0\Library\bin')  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        
        all_text = []
        total_pages = len(images)
        
        for i, image in enumerate(images):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
            if (i + 1) % 5 == 0 or (i + 1) == total_pages:
                await update.message.reply_text(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü...")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            processed_image = preprocess_image(image)
            text = pytesseract.image_to_string(processed_image, lang='rus+eng')
            improved_text = improve_ocr_quality(text)
            
            if improved_text.strip():
                all_text.append(f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ---\n{improved_text}\n")
        
        if all_text:
            full_text = "\n".join(all_text)
            
            if len(full_text) > 4000:
                with tempfile.NamedTemporaryFile(mode='w+', suffix='.txt', encoding='utf-8', delete=False) as temp_file:
                    temp_file.write(full_text)
                    temp_file.flush()
                    await update.message.reply_document(
                        document=InputFile(temp_file.name, filename='recognized_text.txt')
                    )
                os.unlink(temp_file.name)
            else:
                await update.message.reply_text(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF:\n\n{full_text}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ PDF.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

def main():
    if not BOT_TOKEN:
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ tesseract –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–æ–±—ã—á–Ω–æ –¥–ª—è Windows)
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_error_handler(error_handler)
    
    print("–£–ª—É—á—à–µ–Ω–Ω—ã–π OCR –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
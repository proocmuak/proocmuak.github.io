import { supabase } from './supabase.js'

// === —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ ===
const ORDERED_TASKS = {
  chemistry: [6, 7, 8, 14, 15, 22, 23, 24],
  biology: [2, 6, 8, 10, 12, 14, 16, 19, 20]
}

// === –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ ===
function normalizeTaskNumber(taskNumber) {
  if (taskNumber == null) return null
  const s = String(taskNumber).trim()
  const m = s.match(/\d+/)
  if (!m) return null
  const n = parseInt(m[0], 10)
  return Number.isNaN(n) ? null : n
}

// === –∫–æ—Ä–æ—Ç–∫–∏–π subject –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ===
function shortSubjectFromProgressTable(progressTableName) {
  const s = String(progressTableName).toLowerCase()
  if (s.includes('chemistry')) return 'chemistry'
  if (s.includes('biology')) return 'biology'
  return null
}

// === –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function splitAnswerVariantsRaw(raw) {
  if (!raw) return []
  return String(raw)
    .split(/[/]|–ò–õ–ò/i)
    .map(s => s.trim())
    .filter(Boolean)
}

function isDigitSequence(s) {
  return /^[0-9]+$/.test(s)
}

function splitNumericElements(s) {
  return s.split('').filter(ch => /\d/.test(ch))
}

function normalizeText(s) {
  return s.toLowerCase().replace(/\s+/g, '')
}

// === –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ===
function checkNumericAnswer(userRaw, variant, points, orderMatters) {
  const userElems = splitNumericElements(userRaw)
  const correctElems = splitNumericElements(variant)

  if (orderMatters) {
    // –ø–æ—Ä—è–¥–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    let matches = 0
    for (let i = 0; i < correctElems.length; i++) {
      if (userElems[i] === correctElems[i]) matches++
    }
    const mistakes = correctElems.length - matches
    if (mistakes === 0) {
      return { correct: true, partial: false }
    }
    if (points === 2 && mistakes === 1) {
      return { correct: false, partial: true }
    }
  } else {
    if (points === 1 && correctElems.length === userElems.length) {
      let matches = 0
      for (let i = 0; i < correctElems.length; i++) {
        if (userElems[i] === correctElems[i]) matches++
      }
      if (matches === correctElems.length) {
        return { correct: true, partial: false }
      }
    }

    if (points === 2) {
      // –ø–æ—Ä—è–¥–æ–∫ –ù–ï –≤–∞–∂–µ–Ω
      const sortedCorrect = [...correctElems].sort()
      const sortedUser = [...userElems].sort()

      if (JSON.stringify(sortedCorrect) === JSON.stringify(sortedUser)) {
        return { correct: true, partial: false }
      }

      // —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const matches = userElems.filter(e => correctElems.includes(e)).length
      if (
        ((matches === userElems.length || matches === correctElems.length) &&
          Math.abs(correctElems.length - userElems.length) === 1) ||
        Math.abs(matches - correctElems.length) === 1
      ) {
        return { correct: false, partial: true }
      }
    }
  }

  return { correct: false, partial: false }
}

// === –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
function checkAnswer(userAnswerRaw, correctAnswerRaw, points, shortSubject, taskNumberRaw, taskId = null) {
  const userRaw = userAnswerRaw == null ? '' : String(userAnswerRaw).trim()
  if (!userRaw) {
    return { score: 0, isCorrect: false, isPartiallyCorrect: false }
  }

  const variants = splitAnswerVariantsRaw(correctAnswerRaw)
  let anyCorrect = false
  let anyPartial = false

  const taskNum = normalizeTaskNumber(taskNumberRaw)
  let orderMatters = false
  if (points === 2 && shortSubject && taskNum != null) {
    orderMatters = ORDERED_TASKS[shortSubject]?.includes(taskNum) || false
  }

  for (const variant of variants) {
    if (isDigitSequence(variant) && isDigitSequence(userRaw)) {
      const { correct, partial } = checkNumericAnswer(userRaw, variant, points, orderMatters)
      if (correct) {
        anyCorrect = true
        break
      }
      if (partial) {
        anyPartial = true
      }
    } else {
      if (normalizeText(userRaw) === normalizeText(variant)) {
        anyCorrect = true
        break
      }
    }
  }

  const isCorrect = anyCorrect
  const isPartiallyCorrect = !isCorrect && anyPartial
  const score = isCorrect ? points : isPartiallyCorrect ? 1 : 0

  return { score, isCorrect, isPartiallyCorrect }
}

// === —É—Ç–∏–ª–∏—Ç–∞: –≤—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ===
async function getAllProgressRows(progressTable) {
  let allRows = []
  let from = 0
  const pageSize = 1000

  while (true) {
    const { data, error } = await supabase
      .from(progressTable)
      .select('id, user_id, task_id, is_completed, score, user_answer, counted_in_raiting')
      .range(from, from + pageSize - 1)

    if (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –∏–∑ ${progressTable}:`, error)
      break
    }

    if (!data || data.length === 0) break

    allRows = allRows.concat(data)
    from += pageSize
  }

  return allRows
}

// === –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ ===
async function recheckSubjectProgress(subject, supabase) {
  const progressTable = `${subject}_progress`
  const taskBank = `${subject}_task_bank`
  const shortSubject = shortSubjectFromProgressTable(progressTable)

  console.log(`\n=== –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ ${subject} (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å) ===`)

  const progresses = await getAllProgressRows(progressTable)
  console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${progresses.length} –∑–∞–ø–∏—Å–µ–π –≤ ${progressTable}`)

  let updatedCount = 0
  let unchangedCount = 0
  let skippedCount = 0

  for (const prog of progresses) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —á–∞—Å—Ç–∏
    const { data: taskRows, error: taskError } = await supabase
      .from(taskBank)
      .select('id, answer, points, number, part')
      .eq('id', prog.task_id)
      .eq('part', '–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å') // –§–ò–õ–¨–¢–†: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
      .maybeSingle()

    if (taskError || !taskRows) {
      skippedCount++
      continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–µ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∏–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    }
    
    const task = taskRows

    const result = checkAnswer(
      prog.user_answer,
      task.answer,
      task.points,
      shortSubject,
      task.number,
      prog.task_id
    )

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å counted_in_raiting
    const newCountedInRaiting = result.isCorrect // true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—å
    const needsUpdate = 
      result.score !== prog.score || 
      result.isCorrect !== prog.is_completed ||
      newCountedInRaiting !== prog.counted_in_raiting

    if (needsUpdate) {
      updatedCount++
      console.log(
        `UPDATE: user_id=${prog.user_id}, task_id=${prog.task_id}, number=${task.number}, ` +
        `—Å—Ç–∞—Ä—ã–π=${prog.score}/${prog.is_completed}/${prog.counted_in_raiting} ‚Üí –Ω–æ–≤—ã–π=${result.score}/${result.isCorrect}/${newCountedInRaiting}`
      )
      console.log(`   user_answer="${prog.user_answer}", correct_answer="${task.answer}"`)

      const { data: updated, error: updateError } = await supabase
        .from(progressTable)
        .update({
          score: result.score,
          is_completed: result.isCorrect,
          counted_in_raiting: newCountedInRaiting, // –û–ë–ù–û–í–õ–ï–ù–û: –≤—ã—Å—Ç–∞–≤–ª—è–µ–º true —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
          last_updated: new Date().toISOString()
        })
        .eq('id', prog.id)
        .select('*')

      if (updateError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError)
      } else {
        console.log('DEBUG –û–±–Ω–æ–≤–ª–µ–Ω–æ:', updated)
      }
    } else {
      unchangedCount++
    }
  }

  console.log(`\n‚úÖ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ ${subject} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`)
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
  console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–æ: ${updatedCount}`)
  console.log(`   - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${unchangedCount}`)
  console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å): ${skippedCount}`)
}

// === –∑–∞–ø—É—Å–∫ ===
const subjects = ['biology_ege', 'chemistry_ege'] // –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
for (const subj of subjects) {
  await recheckSubjectProgress(subj, supabase)
}